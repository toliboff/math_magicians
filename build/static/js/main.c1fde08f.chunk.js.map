{"version":3,"sources":["logic/operate.js","components/Calculator.js","logic/calculator.js","App.js","index.js"],"names":["operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","mod","Error","Calculator","useState","total","next","obj","setObj","handleClick","e","result","buttonName","match","includes","parseFloat","calculate","target","name","className","map","btn","type","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAEe,SAASA,EAAQC,EAAWC,EAAWC,GACpD,IAAMC,EAAMC,IAAIJ,GACVK,EAAMD,IAAIH,GAChB,GAAkB,MAAdC,EACF,OAAOC,EAAIG,KAAKD,GAAKE,WAEvB,GAAkB,MAAdL,EACF,OAAOC,EAAIK,MAAMH,GAAKE,WAExB,GAAkB,MAAdL,EACF,OAAOC,EAAIM,MAAMJ,GAAKE,WAExB,GAAkB,SAAdL,EACF,OAAOC,EAAIO,IAAIL,GAAKE,WAEtB,GAAkB,MAAdL,EACF,OAAOC,EAAIQ,IAAIN,GAAKE,WAEtB,MAAMK,MAAM,sBAAD,OAAuBV,EAAvB,M,WCQEW,EAxBI,WACjB,MAAsBC,mBAAS,CAC7BC,MAAO,KACPC,KAAM,KACNd,UAAW,OAHb,mBAAOe,EAAP,KAAYC,EAAZ,KAMMC,EAAc,SAACC,GACnB,IAAMC,ECCK,SAAmBJ,EAAKK,EAAYvB,GACjD,MAAmB,OAAfuB,EACK,CACLP,MAAO,KACPC,KAAM,KACNd,UAAW,MAIFoB,EArBCC,MAAM,UAsBC,MAAfD,GAAmC,MAAbL,EAAID,KACrB,GAGLC,EAAIf,UACFe,EAAID,KACC,CAAEA,KAAMC,EAAID,KAAOM,GAErB,CAAEN,KAAMM,GAGbL,EAAID,KACC,CACLA,KAAMC,EAAID,KAAOM,EACjBP,MAAO,MAGJ,CACLC,KAAMM,EACNP,MAAO,MAIQ,MAAfO,EACEL,EAAID,KACFC,EAAID,KAAKQ,SAAS,KACb,GAEF,CAAER,KAAK,GAAD,OAAKC,EAAID,KAAT,MAEXC,EAAIf,UACC,CAAEc,KAAM,MAEbC,EAAIF,MACFE,EAAIF,MAAMS,SAAS,KACd,GAEF,CAAET,MAAM,GAAD,OAAKE,EAAIF,MAAT,MAET,CAAEA,MAAO,MAGC,MAAfO,EACEL,EAAID,MAAQC,EAAIf,UACX,CACLa,MAAOhB,EAAQkB,EAAIF,MAAOE,EAAID,KAAMC,EAAIf,WACxCc,KAAM,KACNd,UAAW,MAIR,GAGU,QAAfoB,EACEL,EAAID,KACC,CAAEA,OAAQ,EAAIS,WAAWR,EAAID,OAAOT,YAEzCU,EAAIF,MACC,CAAEA,QAAS,EAAIU,WAAWR,EAAIF,QAAQR,YAExC,GAYLU,EAAIf,UACC,CACLa,MAAOhB,EAAQkB,EAAIF,MAAOE,EAAID,KAAMC,EAAIf,WACxCc,KAAM,KACNd,UAAWoB,GAOVL,EAAID,KAKF,CACLD,MAAOE,EAAID,KACXA,KAAM,KACNd,UAAWoB,GAPJ,CAAEpB,UAAWoB,GDhGLI,CAAUT,EAAKG,EAAEO,OAAOC,KAAM7B,GAC7CmB,EAAO,2BAAKD,GAAQI,KAItB,OACE,sBAAKQ,UAAU,aAAf,UACE,mBAAGA,UAAU,SAAb,UAAwBZ,EAAIF,OAAS,KAAOE,EAAIf,WAAa,KAAOe,EAAID,MAAQ,MAChF,qBAAKa,UAAU,UAAf,SAJiB,CAAC,KAAM,MAAO,IAAK,OAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,IAAK,KAK3EC,KAAI,SAACC,GAAD,OAAS,wBAAQC,KAAK,SAAmBC,QAAS,SAACb,GAAD,OAAOD,EAAYC,IAAIQ,KAAMG,EAAtE,SAA4EA,GAAjDA,YEhB/CG,EAFH,kBAAM,cAAC,EAAD,KCElBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c1fde08f.chunk.js","sourcesContent":["import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  if (operation === 'รท') {\n    return one.div(two).toString();\n  }\n  if (operation === '%') {\n    return one.mod(two).toString();\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import React, { useState } from 'react';\nimport calculate from '../logic/calculator';\nimport operate from '../logic/operate';\n\nconst Calculator = () => {\n  const [obj, setObj] = useState({\n    total: null,\n    next: null,\n    operation: null,\n  });\n\n  const handleClick = (e) => {\n    const result = calculate(obj, e.target.name, operate);\n    setObj({ ...obj, ...result });\n  };\n\n  const buttonsArray = ['AC', '+/-', '%', 'รท', 7, 8, 9, 'x', 4, 5, 6, '-', 1, 2, 3, '+', 0, '.', '='];\n  return (\n    <div className=\"Calculator\">\n      <p className=\"result\">{(obj.total || '') + (obj.operation || '') + (obj.next || '')}</p>\n      <div className=\"buttons\">\n        {buttonsArray.map((btn) => <button type=\"button\" key={btn} onClick={(e) => handleClick(e)} name={btn}>{btn}</button>)}\n      </div>\n\n    </div>\n  );\n};\n\nexport default Calculator;\n","function isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName, operate) {\n  if (buttonName === 'AC') {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      if (obj.next.includes('.')) {\n        return {};\n      }\n      return { next: `${obj.next}.` };\n    }\n    if (obj.operation) {\n      return { next: '0.' };\n    }\n    if (obj.total) {\n      if (obj.total.includes('.')) {\n        return {};\n      }\n      return { total: `${obj.total}.` };\n    }\n    return { total: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","import React from 'react';\nimport Calculator from './components/Calculator';\n\nconst App = () => <Calculator />;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}